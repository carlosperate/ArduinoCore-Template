# Global properties provided by the Arduino IDE
#
# {runtime.platform.path}     - the absolute path of the platform folder (i.e. the folder containing boards.txt)
# {runtime.hardware.path}     - the absolute path of the hardware folder (i.e. the folder containing the current platform folder)
# {runtime.ide.path}          - the absolute path of the Arduino IDE folder
# {runtime.ide.version}       - the version number of the Arduino IDE as a number (this uses two digits per version
#                               number component, and removes the points and leading zeroes, so Arduino IDE 1.8.3
#                               becomes 01.08.03 which becomes runtime.ide.version=10803).
# {ide_version}               - Compatibility alias for {runtime.ide.version}
# {runtime.os}                - the running OS ("linux", "windows", "macosx")
#
#
# {build.path}              - The path to the temporary folder to store build artifacts
# {build.project_name}      - The project name
# {build.arch}              - The MCU architecture (avr, sam, etc...)

################
# General Info #
################
name=Arduino Core Template Boards
version=0.0.1

#######################################
# Extra flags that can be overwritten #
#######################################
# Left blnk here as it can be overwritten in boards.txt
build.extra_flags=

# Left blank here as these can be overwritten in a platform.local.txt file
# https://arduino.github.io/arduino-cli/latest/platform-specification/#platformlocaltxt
compiler.c.extra_flags=
compiler.cpp.extra_flags=
compiler.S.extra_flags=

##########################
# Compiler configuration #
##########################
# These entries configure how to invoke the compiler for each type of file (C++, C, ASM, etc)
# These values shown here are for the Arm GCC compiler as installed via package_index.json,
# if you add a different compiler or toolchaing this will need to be updated
compiler.path={runtime.tools.arm-none-eabi-gcc-7-2017q4.path}/bin/
compiler.cpp.cmd=arm-none-eabi-g++
compiler.c.cmd=arm-none-eabi-gcc
compiler.S.cmd=arm-none-eabi-gcc
compiler.c.elf.cmd=arm-none-eabi-gcc
compiler.objcopy.cmd=arm-none-eabi-objcopy
compiler.ar.cmd=arm-none-eabi-ar

# The user can set up different compiler warning levels in the Arduino IDE/CLI
# The values shown here are valid for GCC based compilers
compiler.warning_flags=-w
compiler.warning_flags.none=-w
compiler.warning_flags.default=
compiler.warning_flags.more=-Wall
compiler.warning_flags.all=-Wall -Wextra

# The following entries specifytThe compiler flags for each kind of file to be compiled
# The values included here are needed independently of toolchain, but you'll have to
# add more relevant to the compiler and MCU for your Arduino Core
compiler.cpp.flags=-c {compiler.warning_flags}
compiler.c.flags=-c {compiler.warning_flags}
compiler.S.flags=
compiler.c.elf.flags=
compiler.ar.flags=
